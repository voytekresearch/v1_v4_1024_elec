"""Enrich odml IDs

Add subject specific metadata about electrode IDs and impedances to the
previously generated basic odml metadata template.

Usage:
    enrich_odml_IDs.py --odml-template=FILE \
                       --impedance=DIR \
                       --id-map=FILE \
                       --ns6=FILE \
                       --array-pos=FILE \
                       --elec-pos=FILE \
                       --out=FILE


Options:
    -h --help             Show this screen and terminate script.
    --odml-template=FILE  Path to .odml template file.
    --impedance=DIR       Path to impedance metadata folder.
    --id-map=FILE         Path to id mapping .mat file.
    --ns6=FILE            Path to sample .ns6 data file.
    --array-pos=FILE      Path to array position .csv file.
    --elec-pos=FILE       Path to electrode-in-array position .csv file.
    --out=FILE            Output file path.
"""

from docopt import docopt

from os.path import join, dirname
import glob

from scipy.io import loadmat
import neo
import odml

import pandas as pd
import numpy as np


if __name__ == "__main__":

    # Get arguments
    vargs = docopt(__doc__)
    odml_template_path = vargs['--odml-template']
    impedance_path = vargs['--impedance']
    id_map_path = vargs['--id-map']
    ns6_path = dirname(vargs['--ns6'])
    array_pos_path = vargs['--array-pos']
    elec_pos_path = vargs['--elec-pos']
    output_odml = vargs['--out']

    # Load .mat file generated by Xing Chen for the channel id mapping
    mapping = loadmat(id_map_path)

    # Find all impedance measurements in the given path and load them
    impedance_files = glob.glob(join(impedance_path,
                                     'impedanceAllChannels*.mat'))
    # Resolve impedance info
    imp = {}
    imp_measurement_date = []
    for file in impedance_files:
        impedance = loadmat(file)
        date = file.split('_')[-1].split('.')[0]
        imp[date] = impedance['impedanceAllChannels']
        imp_measurement_date.append(date)

    # Load schematic array positions and relative electrode positions
    array_pos = pd.read_csv(array_pos_path).set_index('Array_ID')
    elec_pos_in_array = pd.read_csv(elec_pos_path).set_index('Elec_ID')

    # Load fixed experimental setup metadata
    template_odml = odml.load(odml_template_path)
    arrays = template_odml['Arrays']

    # create a section for each utah array in the setup
    arr_list = []
    for array_num in range(1, 17):
        arr_name = 'Array_' + str(array_num)
        arr = odml.Section(name=arr_name,
                           type='Array',
                           definition="Metadata about specific Array",
                           parent=arrays)
        odml.Property(name="Array_ID",
                      definition="General array number (1 to 16)",
                      values=array_num,
                      dtype='int',
                      parent=arr)
        arr_list.append(arr)

    for nspNum in range(8):

        # Resolve path to nsp file, to get metadata
        nsp_file = 'NSP' + str(nspNum+1) + '_aligned.ns6'
        nsp_path = join(ns6_path, nsp_file)

        print(nsp_path)

        # Neo IO
        io = neo.io.BlackrockIO(nsp_path)

        # Load data structure but not the data itself
        block = io.read_block(lazy=True)

        # Load analog signal for all blocks and channels
        anasig_array = block.segments[0].analogsignals[-1]

        # Array annotations from the data
        channel_names = anasig_array.array_annotations['channel_names'].copy()

        for nspChannelNum, name in enumerate(channel_names):

            # Main ID from 1 to 1024
            id_main = int(name.split('-')[1])
            sec_name = 'Electrode_' + format(id_main, '04d')

            # ID of the array and which electrode inside of it
            id_arrayNum = int(name.split('-')[0].split('elec')[-1])
            id_arrayChannelNum64 = mapping['channelNums'][nspChannelNum,
                                                          nspNum]

            # ID of the NSP and which channel inside of it
            id_nspNum = nspNum + 1
            id_nspChannelNum = nspChannelNum + 1

            # Cortical area recorded from
            cortical_area = 'V' + str(mapping['areas'][nspChannelNum, nspNum])

            # Resolve array section to which the electrode belongs
            arr = arr_list[id_arrayNum - 1]

            # Get schematic x and y positions of the electrode
            # Take x and y from inside array
            x = elec_pos_in_array['x (um)'].loc[id_arrayChannelNum64]
            y = elec_pos_in_array['y (um)'].loc[id_arrayChannelNum64]
            # Rotate the vector according to the array rotation
            foo_vec = np.array([[x], [y]])
            theta_deg = array_pos['Rotation-xy (deg)'].loc[id_arrayNum]
            theta = np.radians(array_pos['Rotation-xy (deg)'].loc[id_arrayNum])
            R = np.array([[np.cos(theta), -np.sin(theta)],
                          [np.sin(theta), np.cos(theta)]])
            vec_in_array = np.dot(R, foo_vec)  # Rotation
            # Finally add to the relative position of the array center
            schematic_x = vec_in_array[0] + \
                array_pos['x (um)'].loc[id_arrayNum]
            schematic_y = vec_in_array[1] + \
                array_pos['y (um)'].loc[id_arrayNum]

            if "NSP_ID" not in arr.properties:
                # NSP identity to which the array belongs
                odml.Property(name="NSP_ID",
                              definition="NSP where array belongs (1 to 8)",
                              values=id_nspNum,
                              dtype='int',
                              parent=arr)

            if "CorticalArea" not in arr.properties:
                # Cortical area the array is located in
                odml.Property(name="CorticalArea",
                              definition="Cortical area of array recording",
                              values=cortical_area,
                              dtype='string',
                              parent=arr)

            # Create a dedicated section and add IDs as properties to the odml
            el = odml.Section(name=sec_name,
                              type='Electrode',
                              definition="Metadata about specific electrode",
                              parent=arr)
            odml.Property(name="Electrode_ID",
                          definition="General ID of electrode (1 to 1024)",
                          values=id_main,
                          dtype='int',
                          parent=el)
            odml.Property(name="NSP_ID",
                          definition="NSP to which electrode belongs (1 to 8)",
                          values=id_nspNum,
                          dtype='int',
                          parent=el)
            odml.Property(name="within_NSP_electrode_ID",
                          definition="Electrode ID inside NSP (1 to 128)",
                          values=id_nspChannelNum,
                          dtype='int',
                          parent=el)
            odml.Property(name="Array_ID",
                          definition="Array where electrode belongs (1 to 16)",
                          values=id_arrayNum,
                          dtype='int',
                          parent=el)
            odml.Property(name="within_array_electrode_ID",
                          definition="Electrode ID inside array (1 to 64)",
                          values=id_arrayChannelNum64,
                          dtype='int',
                          parent=el)
            odml.Property(name="schematic_X_position",
                          definition="""schematic position in the X axis,
                                        with the center of array1 as a
                                        reference (x=0)""",
                          unit="um",
                          values=schematic_x,
                          dtype='int',
                          parent=el)
            odml.Property(name="schematic_Y_position",
                          definition="""schematic position in the Y axis,
                                        with the center of array1 as a
                                        reference (y=0)""",
                          unit="um",
                          values=schematic_y,
                          dtype='int',
                          parent=el)
            odml.Property(name="schematic_rotation",
                          definition="""schematic rotation of the array
                                        in the x-y axis""",
                          unit="degrees",
                          values=theta_deg,
                          dtype='int',
                          parent=el)

            # Append impedance
            for date in imp_measurement_date:
                prop_name = 'Impedance_' + date
                impedance_value = imp[date][imp[date][:, 2] == id_main, 0][0]
                odml.Property(name=prop_name,
                              definition="Impedance and date it was measured",
                              values=impedance_value,
                              unit='kOhm',
                              dtype='float',
                              parent=el)

    # odml.save(template_odml, output_odml)
    odml.tools.XMLWriter(template_odml).write_file(output_odml,
                                                   local_style=True)
